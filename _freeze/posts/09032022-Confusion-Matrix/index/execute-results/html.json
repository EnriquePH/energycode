{
  "hash": "004744ae2dd65699eb9349e5667c83ef",
  "result": {
    "markdown": "---\ntitle: Confusion Matrix in R\ndescription: Plotting the Confusion Matrix with ggplot and R\nauthor: 'Enrique Pérez Herrero'\ndate: '2022-03-09'\nimage: conf_matrix.png\ncategories:\n  - R\n  - code\n  - machine learning\neditor: source\ndraft: false\n---\n\n\n# Confusion Matrix\n\nThe confusion matrix allows visualization of the performance of a classification\nalgorithm.\n\nIn this blog post, a function is shown to create an image of the confusion\nmatrix.\n\nThe R package `caret` includes the `confusionMatrix` function, which provides a\ncomprehensive output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071)\nlibrary(caTools)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(caret)\n```\n:::\n\n\n## Classification\n\nWe will perform a [Naive Bayes\nclassification](https://en.wikipedia.org/wiki/Naive_Bayes_classifier) on the\nclassical iris data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# train and test data\niris$spl <- caTools::sample.split(iris, SplitRatio = 0.8)\ntrain <- subset(iris, iris$spl == TRUE)\ntest <- subset(iris, iris$spl == FALSE)\n\niris_nb <- naiveBayes(Species ~ ., data = train)\nnb_train_predict <- predict(iris_nb, test[, names(test) != \"Species\"])\n\ncfm <- confusionMatrix(nb_train_predict, test$Species)\ncfm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   setosa versicolor virginica\n  setosa         10          0         0\n  versicolor      0          9         0\n  virginica       0          1        10\n\nOverall Statistics\n                                          \n               Accuracy : 0.9667          \n                 95% CI : (0.8278, 0.9992)\n    No Information Rate : 0.3333          \n    P-Value [Acc > NIR] : 2.963e-13       \n                                          \n                  Kappa : 0.95            \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: setosa Class: versicolor Class: virginica\nSensitivity                 1.0000            0.9000           1.0000\nSpecificity                 1.0000            1.0000           0.9500\nPos Pred Value              1.0000            1.0000           0.9091\nNeg Pred Value              1.0000            0.9524           1.0000\nPrevalence                  0.3333            0.3333           0.3333\nDetection Rate              0.3333            0.3000           0.3333\nDetection Prevalence        0.3333            0.3000           0.3667\nBalanced Accuracy           1.0000            0.9500           0.9750\n```\n:::\n:::\n\n\n## Plotting\n\nTo plot the obtained confusion matrix as a `ggplot` graphic, we will use the\nfollowing function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot_confusion_matrix <- function(cfm) {\n  mytitle <- paste(\"Accuracy\", percent_format() (cfm$overall[1]),\n                   \"Kappa\", percent_format() (cfm$overall[2]))\n  p <-\n    ggplot(data = as.data.frame(cfm$table),\n           aes(x = Reference, y = Prediction)) +\n    geom_tile(aes(fill = log(Freq)), colour = \"white\") +\n    scale_fill_gradient(low = \"white\", high = \"steelblue\") +\n    geom_text(aes(x = Reference, y = Prediction, label = Freq)) +\n    theme(legend.position = \"none\") +\n    ggtitle(mytitle)\n  return(p)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot_confusion_matrix(cfm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Links\n\n* StackOverflow: [How to produce a confusion matrix and find the misclassification rate of the Naïve Bayes Classifier?](https://stackoverflow.com/questions/46063234/how-to-produce-a-confusion-matrix-and-find-the-misclassification-rate-of-the-na%c3%af/46063613#46063613)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}